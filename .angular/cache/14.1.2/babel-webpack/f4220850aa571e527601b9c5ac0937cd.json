{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { CollectionArtwork } from \"./collectionArtwork.model\";\nimport { ConfigSettings } from \"./config\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RestDataSource = /*#__PURE__*/(() => {\n  class RestDataSource {\n    constructor(http) {\n      this.http = http; // configuration settings\n\n      this.configSettings = new ConfigSettings(); // Citizen data URLs \n\n      this.userUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID + '?query=%7B%22type%22:%22user%22%7D&limit=9999';\n      this.themeUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID + '?query=%7B%22type%22:%22theme%22%7D&limit=9999';\n      this.artworkUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID + '?query=%7B%22type%22:%22artwork%22%7D&limit=9999';\n      this.scriptUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID + '?query=%7B%22type%22:%22script%22%7D&limit=9999';\n      this.activityUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID + '?query=%7B%22type%22:%22activity%22%7D&limit=9999';\n      this.saveUrl = 'https://api2.mksmart.org/object/' + this.configSettings.citizenDatasetUUID; //Collection query\n\n      this.collectionURL = \"https://api2.mksmart.org/query/\" + this.configSettings.collectionDatasetUUID + \"/sparql?query=\" + this.configSettings.collectionQuery;\n    } // User\n\n\n    getUserData() {\n      return this.http.get(this.userUrl, this.configSettings.config);\n    }\n\n    saveUser(user) {\n      return this.http.post(this.saveUrl, user, this.configSettings.config);\n    }\n\n    updateUser(user) {\n      return this.http.put(`${this.saveUrl}/${user._id}`, user, this.configSettings.config);\n    }\n\n    deleteUser(_id) {\n      return this.http.delete(`${this.saveUrl}/${_id}`, this.configSettings.config);\n    } // Theme\n\n\n    getThemeData() {\n      return this.http.get(this.themeUrl, this.configSettings.config);\n    }\n\n    saveTheme(theme) {\n      return this.http.post(this.saveUrl, theme, this.configSettings.config);\n    }\n\n    updateTheme(theme) {\n      return this.http.put(`${this.saveUrl}/${theme._id}`, theme, this.configSettings.config);\n    }\n\n    deleteTheme(_id) {\n      return this.http.delete(`${this.saveUrl}/${_id}`, this.configSettings.config);\n    } // Artwork\n\n\n    getArtworkData() {\n      return this.http.get(this.artworkUrl, this.configSettings.config);\n    }\n\n    saveArtwork(artwork) {\n      return this.http.post(this.saveUrl, artwork, this.configSettings.config);\n    }\n\n    updateArtwork(artwork) {\n      return this.http.put(`${this.saveUrl}/${artwork._id}`, artwork, this.configSettings.config);\n    }\n\n    deleteArtwork(_id) {\n      return this.http.delete(`${this.saveUrl}/${_id}`, this.configSettings.config);\n    } // Script\n\n\n    getScriptData() {\n      return this.http.get(this.scriptUrl, this.configSettings.config);\n    }\n\n    saveScript(script) {\n      return this.http.post(this.saveUrl, script, this.configSettings.config);\n    }\n\n    updateScript(script) {\n      return this.http.put(`${this.saveUrl}/${script._id}`, script, this.configSettings.config);\n    }\n\n    deleteScript(_id) {\n      return this.http.delete(`${this.saveUrl}/${_id}`, this.configSettings.config);\n    } // Activity\n\n\n    getActivityData() {\n      return this.http.get(this.activityUrl, this.configSettings.config);\n    }\n\n    saveActivity(activity) {\n      return this.http.post(this.saveUrl, activity, this.configSettings.config);\n    }\n\n    updateActivity(activity) {\n      return this.http.put(`${this.saveUrl}/${activity._id}`, activity, this.configSettings.config);\n    }\n\n    deleteActivity(_id) {\n      return this.http.delete(`${this.saveUrl}/${_id}`, this.configSettings.config);\n    }\n\n    getCollection() {\n      const obs = new Observable(observer => {\n        this.http.get(this.collectionURL, this.configSettings.config).subscribe(data => {\n          let resarray = [];\n\n          for (var item of data[\"results\"][\"bindings\"]) {\n            observer.next(new CollectionArtwork(item[\"title\"][\"value\"], item[\"creatorname\"][\"value\"], item[\"year\"][\"value\"], item[\"artworkurl\"][\"value\"], item[\"title\"][\"value\"] + ', ' + item[\"creatorname\"][\"value\"] + ', ' + item[\"year\"][\"value\"]));\n          }\n\n          observer.complete();\n        });\n      });\n      return obs;\n    }\n\n  }\n\n  RestDataSource.ɵfac = function RestDataSource_Factory(t) {\n    return new (t || RestDataSource)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestDataSource.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestDataSource,\n    factory: RestDataSource.ɵfac\n  });\n  return RestDataSource;\n})();","map":null,"metadata":{},"sourceType":"module"}