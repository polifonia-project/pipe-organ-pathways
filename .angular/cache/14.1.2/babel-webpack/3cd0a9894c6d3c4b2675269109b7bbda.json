{"ast":null,"code":"import { ExtraArtworks } from \"./extraArtworks\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let Model = /*#__PURE__*/(() => {\n  class Model {\n    // new Array<CollectionArtwork>();\n    constructor(dbDataSource) {\n      this.dbDataSource = dbDataSource;\n\n      this.locator = (x, id) => x.id == id;\n\n      this.themeLocator = (theme, id) => theme._id === id;\n\n      this.scriptLocator = (script, id) => script._id == id;\n\n      this.activityLocator = (activity, id) => activity._id == id;\n\n      this.artworkLocator = (artwork, id) => artwork._id == id;\n\n      this.userLocator = (user, id) => user._id == id;\n\n      this.stringLocator = (x, id) => x._id == id;\n\n      this.openAndVisible = x => x.open && x.visible;\n\n      this.visible = x => x.visible;\n\n      this.hasTheme = (x, _id) => x.themeids.find(e => e == _id);\n\n      this.scriptHasArtworkAndStage = x => x.homepageartworkid != undefined && x.artworkids.length > 0 && x.stages.length > 0;\n\n      this.dbArtworks = new Array();\n      this.dbScripts = new Array();\n      this.dbThemes = new Array();\n      this.dbActivities = new Array();\n      this.dbUsers = new Array(); //add artworks not in LDH//\n\n      this.extraArtworks = new ExtraArtworks();\n      this.dbCollectionArtworks = this.extraArtworks.artworks;\n      this.dbDataSource.getUserData().subscribe(data => this.dbUsers = data);\n      this.dbDataSource.getThemeData().subscribe(data => this.dbThemes = data);\n      this.dbDataSource.getArtworkData().subscribe(data => this.dbArtworks = data);\n      this.dbDataSource.getActivityData().subscribe(data => this.dbActivities = data);\n      this.dbDataSource.getScriptData().subscribe(data => this.dbScripts = data);\n      this.dbDataSource.getCollection().subscribe(val => {\n        this.dbCollectionArtworks.push(val);\n      });\n    } // Collection\n\n\n    getCollection() {\n      return this.dbCollectionArtworks;\n    } // User\n\n\n    getUsers() {\n      return this.dbUsers;\n    }\n\n    getUser(_id) {\n      return this.dbUsers.find(x => this.stringLocator(x, _id));\n    }\n\n    saveUser(user) {\n      if (user.id == 0 || user.id == null) {\n        user.id = this.generateUserID();\n      }\n\n      if (user._id == undefined) {\n        this.dbDataSource.saveUser(user).subscribe(p => this.dbUsers.push(p));\n      } else {\n        this.dbDataSource.updateUser(user).subscribe(() => {\n          let index = this.dbUsers.findIndex(item => this.userLocator(item, user._id));\n          this.dbUsers.splice(index, 1, user);\n        });\n      }\n    }\n\n    deleteUser(_id) {\n      this.dbDataSource.deleteUser(_id).subscribe(() => {\n        let index = this.dbUsers.findIndex(p => this.stringLocator(p, _id));\n\n        if (index > -1) {\n          this.dbUsers.splice(index, 1);\n        }\n      });\n    } // Theme\n\n\n    refreshThemes() {\n      this.dbDataSource.getThemeData().subscribe(data => this.dbThemes = data);\n    }\n\n    getThemes() {\n      return this.dbThemes;\n    }\n\n    getTheme(_id) {\n      return this.dbThemes.find(x => this.stringLocator(x, _id));\n    }\n\n    saveTheme(theme) {\n      if (theme.id == 0 || theme.id == null) {\n        theme.id = this.generateThemeID();\n      }\n\n      if (theme._id == undefined) {\n        this.dbDataSource.saveTheme(theme).subscribe(p => this.dbThemes.push(p));\n      } else {\n        this.dbDataSource.updateTheme(theme).subscribe(() => {\n          let index = this.dbThemes.findIndex(item => this.themeLocator(item, theme._id));\n          this.dbThemes.splice(index, 1, theme);\n        });\n      }\n    }\n\n    deleteTheme(_id) {\n      let deletedTheme = this.getTheme(_id);\n      this.dbDataSource.deleteTheme(_id).subscribe(() => {\n        let index = this.dbThemes.findIndex(p => this.themeLocator(p, _id));\n\n        if (index > -1) {\n          this.dbThemes.splice(index, 1);\n        }\n      }); //shift higher theme ids down\n\n      for (var theme of this.dbThemes) {\n        if (theme.id > deletedTheme.id) {\n          theme.id = theme.id - 1;\n          this.saveTheme(theme);\n        }\n      }\n    }\n\n    deleteThemeFromScripts(_id, theme) {\n      let scripts = this.getScriptsAllOfTheme(_id);\n      scripts.forEach(script => {\n        this.removeThemeFromScript(script, theme._id);\n      });\n    }\n\n    getScriptsAllOfTheme(_id) {\n      return this.getScripts().filter(x => x.themeids.includes(_id));\n    }\n\n    getDefaultThemeId() {\n      return this.dbThemes[0]._id;\n    }\n\n    findIndexToUpdate(newItem) {\n      return newItem._id === this;\n    }\n\n    updateThemePosition(theme, newPosition) {\n      console.log(theme, newPosition); //if old position < new\n\n      if (theme.id < newPosition) {\n        for (var newTheme of this.dbThemes) {\n          if (newTheme.id <= newPosition && newTheme.id > theme.id) {\n            let idnumber = +newTheme.id;\n            newTheme.id = idnumber - 1;\n            this.saveTheme(newTheme);\n          }\n        }\n      } // if old position > new\n      else if (theme.id > newPosition) {\n        for (var newTheme of this.dbThemes) {\n          if (newTheme.id >= newPosition && newTheme.id < theme.id) {\n            let idnumber = +newTheme.id;\n            newTheme.id = idnumber + 1;\n            this.saveTheme(newTheme);\n          }\n        }\n      } //\n\n\n      if (theme.id !== newPosition) {\n        let idnumber = +newPosition;\n        theme.id = idnumber;\n        this.saveTheme(theme);\n      }\n    } // Artwork\n\n\n    refreshArtworks() {\n      this.dbDataSource.getArtworkData().subscribe(data => this.dbArtworks = data);\n    }\n\n    getArtworks() {\n      return this.dbArtworks;\n    }\n\n    getArtwork(_id) {\n      return this.dbArtworks.find(x => this.stringLocator(x, _id));\n    }\n\n    saveArtwork(artwork) {\n      if (artwork.id == 0 || artwork.id == null) {\n        artwork.id = this.generateArtworkID();\n      }\n\n      if (artwork._id == undefined) {\n        this.dbDataSource.saveArtwork(artwork).subscribe(p => {\n          this.dbArtworks.push(p);\n        });\n      } else {\n        this.dbDataSource.updateArtwork(artwork).subscribe(() => {\n          let index = this.dbArtworks.findIndex(item => this.artworkLocator(item, artwork._id));\n          this.dbArtworks.splice(index, 1, artwork);\n        });\n      }\n    }\n\n    deleteArtwork(_id) {\n      this.dbDataSource.deleteArtwork(_id).subscribe(() => {\n        let index = this.dbArtworks.findIndex(p => this.stringLocator(p, _id));\n\n        if (index > -1) {\n          this.dbArtworks.splice(index, 1);\n        }\n      });\n    }\n\n    addArtworkToScript(script, artworkid) {\n      //add theme\n      script.artworkids.push(artworkid);\n    }\n\n    removeArtworkFromScript(script, artworkid) {\n      let index = script.artworkids.findIndex(x => x == artworkid);\n      script.artworkids.splice(index, 1);\n\n      if (script.homepageartworkid == artworkid) {\n        script.homepageartworkid = undefined;\n      }\n    }\n\n    addArtworkToIncludedArtworks(script, stage, artworkid) {\n      //find stage in script\n      let index = script.stages.findIndex(x => x.id == stage.id); //add artworkid to stage\n\n      script.stages[index].includeartworks.push(artworkid);\n    }\n\n    removeArtworkFromIncludedArtworks(script, stage, artworkid) {\n      //find stage in script\n      let index = script.stages.findIndex(x => x.id == stage.id); //remove artworkid from stage\n\n      let scriptindex = script.stages[index].includeartworks.findIndex(p => p == artworkid);\n\n      if (scriptindex > -1) {\n        script.stages[index].includeartworks.splice(scriptindex, 1);\n      }\n    } // Script\n\n\n    getScripts() {\n      return this.dbScripts;\n    }\n\n    getScriptsOfAnArtwork(_id) {\n      return this.getScripts().filter(x => x.artworkids.some(y => y == _id));\n    }\n\n    removeArtworkFromScripts(scripts, _id) {\n      for (var script of scripts) {\n        //remove artwork from artworkids\n        let index = script.artworkids.findIndex(p => p == _id);\n\n        if (index > -1) {\n          script.artworkids.splice(index, 1); //remove artwork from homepageartworkid\n\n          if (script.homepageartworkid == _id) {\n            script.homepageartworkid = undefined; //replace homepageartworkid if artworkids is not empty\n\n            if (script.artworkids.length > 0) {\n              script.homepageartworkid = script.artworkids[0];\n            }\n          } //remove artwork from stages\n\n\n          for (var stage of script.stages) {\n            this.removeArtworkFromIncludedArtworks(script, stage, _id);\n          }\n\n          this.saveScript(script);\n        }\n      }\n    }\n\n    getOpenVisibleScripts() {\n      return this.dbScripts.filter(x => this.openAndVisible(x));\n    }\n\n    getVisibleScripts() {\n      return this.dbScripts.filter(x => this.visible(x));\n    }\n\n    getVisibleScriptsOfTheme(_id) {\n      let scripts = this.getVisibleScripts().filter(x => this.hasTheme(x, _id));\n      scripts = scripts.filter(x => this.scriptHasArtworkAndStage(x));\n      return scripts;\n    }\n\n    getScriptsOfTheme(_id) {\n      let scripts = this.getOpenVisibleScripts().filter(x => this.hasTheme(x, _id));\n      scripts = scripts.filter(x => this.scriptHasArtworkAndStage(x));\n      return scripts;\n    }\n\n    getScript(_id) {\n      return this.dbScripts.find(x => this.stringLocator(x, _id));\n    }\n\n    saveScript(script) {\n      if (script.id == 0 || script.id == null) {\n        script.id = this.generateScriptID();\n      }\n\n      if (script._id == undefined) {\n        this.dbDataSource.saveScript(script).subscribe(p => {\n          this.dbScripts.push(p);\n        });\n      } else {\n        this.dbDataSource.updateScript(script).subscribe(() => {\n          let index = this.dbScripts.findIndex(item => this.scriptLocator(item, script._id));\n          this.dbScripts.splice(index, 1, script);\n        });\n      }\n    }\n\n    deleteScript(_id) {\n      this.dbDataSource.deleteScript(_id).subscribe(() => {\n        let index = this.dbScripts.findIndex(p => this.stringLocator(p, _id));\n\n        if (index > -1) {\n          this.dbScripts.splice(index, 1);\n        }\n      });\n    }\n\n    addThemeToScript(script, themeid) {\n      //add theme\n      script.themeids.push(themeid);\n    }\n\n    removeThemeFromScript(script, themeid) {\n      let index = script.themeids.findIndex(x => x == themeid);\n      script.themeids.splice(index, 1);\n    }\n\n    saveStage(stage, script) {\n      if (stage.id == 0 || stage.id == null) {\n        stage.id = this.generateScriptStageId(script);\n      }\n\n      return stage.id;\n    } // Activity\n\n\n    getActivity(id) {\n      return this.dbActivities.find(x => this.locator(x, id));\n    }\n\n    getActivities() {\n      return this.dbActivities;\n    }\n\n    getApprovedActivitiesOfAScript(scriptId) {\n      return this.getApprovedActivities().filter(x => x.script._id == scriptId);\n    }\n\n    getApprovedActivities() {\n      return this.dbActivities.filter(x => x.approved);\n    }\n\n    getApprovedVisibleActivities() {\n      return this.getApprovedActivities().filter(x => x.script.visible);\n    }\n\n    getUnapprovedActivities() {\n      return this.dbActivities.filter(x => !x.approved);\n    }\n\n    saveActivity(activity) {\n      if (activity.id == 0 || activity.id == null) {\n        activity.id = this.generateActivityID();\n      }\n\n      if (activity._id == undefined) {\n        this.dbDataSource.saveActivity(activity).subscribe(p => this.dbActivities.push(p));\n      } else {\n        this.dbDataSource.updateActivity(activity).subscribe(() => {\n          let index = this.dbActivities.findIndex(item => this.activityLocator(item, activity._id));\n          this.dbActivities.splice(index, 1, activity);\n        });\n      }\n    }\n\n    deleteActivity(_id) {\n      this.dbDataSource.deleteActivity(_id).subscribe(() => {\n        let index = this.dbActivities.findIndex(p => this.stringLocator(p, _id));\n\n        if (index > -1) {\n          this.dbActivities.splice(index, 1);\n        }\n      });\n    }\n\n    addStageToScript(script, stage) {\n      script.stages.push(stage);\n      this.saveScript(script);\n    }\n\n    removeStageFromScript(script, stage) {\n      // remove stage\n      let index = script.stages.findIndex(x => this.locator(x, stage.id));\n      script.stages.splice(index, 1); // save script\n\n      this.saveScript(script);\n    }\n\n    moveScriptStage(script, oldPosition, newPosition) {\n      //move script stage position\n      this.insertAndShiftStages(script.stages, oldPosition, newPosition); //save script\n\n      this.saveScript(script);\n    }\n\n    insertAndShiftStages(arr, from, to) {\n      let cutOut = arr.splice(from, 1)[0]; // cut the element at index 'from'\n\n      arr.splice(to, 0, cutOut); // insert it at index 'to'\n    } // ID generators\n\n\n    generateUserID() {\n      let candidate = 1;\n\n      while (this.dbUsers.find(element => element.id == candidate)) {\n        candidate++;\n      }\n\n      return candidate;\n    }\n\n    generateActivityID() {\n      let candidate = 1;\n\n      while (this.dbActivities.find(element => element.id == candidate)) {\n        candidate++;\n      }\n\n      return candidate;\n    }\n\n    generateThemeID() {\n      let candidate = 1;\n\n      while (this.dbThemes.find(element => element.id == candidate)) {\n        candidate++;\n      }\n\n      return candidate;\n    }\n\n    generateScriptID() {\n      let candidate = 0;\n\n      for (var script of this.dbScripts) {\n        if (script.id > candidate) {\n          candidate = script.id;\n        }\n      }\n\n      candidate = candidate + 1;\n      return candidate;\n    }\n\n    generateArtworkID() {\n      let candidate = 1;\n\n      while (this.dbArtworks.find(element => element.id == candidate)) {\n        candidate++;\n      }\n\n      return candidate;\n    }\n\n    getScriptStageFromId(script, id) {\n      return script.stages.find(s => s.id == id);\n    }\n\n    generateScriptStageId(script) {\n      let candidate = 1;\n\n      if (script.stages.length == 0) {\n        return candidate;\n      }\n\n      while (this.getScriptStageFromId(script, candidate) !== undefined) {\n        candidate++;\n      }\n\n      return candidate;\n    }\n\n  }\n\n  Model.ɵfac = function Model_Factory(t) {\n    return new (t || Model)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  Model.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Model,\n    factory: Model.ɵfac\n  });\n  return Model;\n})();","map":null,"metadata":{},"sourceType":"module"}